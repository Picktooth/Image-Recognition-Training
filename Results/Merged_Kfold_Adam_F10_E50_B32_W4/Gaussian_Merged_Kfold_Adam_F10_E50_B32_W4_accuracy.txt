Model: Gaussian_Merged_Kfold_Adam_F10_E50_B32_W4

Total Epochs: 50

Accuracy of the network on the 10000 test images: 72 %

Accuracy for class: airplane is 67.0 %
Accuracy for class: automobile is 81.0 %
Accuracy for class: bird  is 73.0 %
Accuracy for class: cat   is 60.0 %
Accuracy for class: deer  is 54.0 %
Accuracy for class: dog   is 71.0 %
Accuracy for class: frog  is 78.0 %
Accuracy for class: horse is 74.0 %
Accuracy for class: ship  is 91.0 %
Accuracy for class: truck is 76.0 %

Model:

class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        
        # Creating three convolutional layers and utilizing batch normalization
        self.conv1 = nn.Conv2d(3, 64, 3, padding=1)
        self.batch_norm1 = nn.BatchNorm2d(64)
        self.conv2 = nn.Conv2d(64, 128, 3, padding=1)
        self.batch_norm2 = nn.BatchNorm2d(128)
        self.conv3 = nn.Conv2d(128, 256, 3, padding=1)
        self.batch_norm3 = nn.BatchNorm2d(256)
        
        # Dropout Layers
        self.dropout1 = nn.Dropout(0.5)
        self.dropout2 = nn.Dropout(0.5)
        self.dropout3 = nn.Dropout(0.5)

        
        self.pool = nn.MaxPool2d(2, 2)
        self.fc1 = nn.Linear(256 * 4 * 4, 1024)
        self.batch_norm_fc1 = nn.BatchNorm1d(1024)
        self.fc2 = nn.Linear(1024, 512)
        self.batch_norm_fc2 = nn.BatchNorm1d(512)
        self.fc3 = nn.Linear(512, 256)
        self.batch_norm_fc3 = nn.BatchNorm1d(256)
        self.fc4 = nn.Linear(256, 128)
        self.batch_norm_fc4 = nn.BatchNorm1d(128)
        self.fc5 = nn.Linear(128, 10)

    def forward(self, x):
        x = self.pool(F.relu(self.batch_norm1(self.conv1(x))))
        x = self.dropout1(x)
        x = self.pool(F.relu(self.batch_norm2(self.conv2(x))))
        x = self.dropout2(x)
        x = self.pool(F.relu(self.batch_norm3(self.conv3(x))))
        x = self.dropout3(x)
        
        x = x.view(-1, 256 * 4 * 4)
        
        x = F.relu(self.batch_norm_fc1(self.fc1(x)))
        x = F.relu(self.batch_norm_fc2(self.fc2(x)))
        x = F.relu(self.batch_norm_fc3(self.fc3(x)))
        x = F.relu(self.batch_norm_fc4(self.fc4(x)))
        
        x = self.fc5(x)

        return x